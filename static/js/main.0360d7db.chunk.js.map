{"version":3,"sources":["model/laptopModel.js","model/layoutModel.js","components/loadingComponent.js","App.js","reportWebVitals.js","index.js"],"names":["Laptop","main","useRef","nodes","useLoader","GLTFLoader","console","log","useFrame","current","rotation","y","ref","scale","position","attach","geometry","color","Layout","args","receiveShadow","Math","PI","transparent","opacity","fallback","Loading","skyColor","groundColor","intensity","castShadow","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yQAIe,SAASA,IACpB,IAAMC,EAAOC,mBACNC,EAASC,YAAUC,IAAY,cAA/BF,MAKP,OAJAG,QAAQC,IAAIJ,GACZK,aAAS,WACLP,EAAKQ,QAAQC,SAASC,GAAK,QAG3B,wBAAOC,IAAKX,EAAMS,SAAU,CAAC,GAAG,GAAG,KAAMG,MAAO,CAAC,IAAI,IAAI,KAAMC,SAAU,EAAE,GAAG,GAAG,GAAjF,UACI,iCACI,4CAAgBC,OAAO,YAAeZ,EAAK,OAAWa,WACtD,mCAAmBD,OAAO,WAAWE,MAAM,eAE/C,iCACI,4CAAgBF,OAAO,YAAeZ,EAAK,OAAWa,WACtD,mCAAmBD,OAAO,WAAWE,MAAM,aAE/C,iCACI,4CAAgBF,OAAO,YAAeZ,EAAK,OAAWa,WACtD,mCAAmBD,OAAO,WAAWE,MAAM,aAE/C,iCACI,4CAAgBF,OAAO,YAAeZ,EAAK,OAAWa,WACtD,mCAAmBD,OAAO,WAAWE,MAAM,cCxB5C,SAASC,IACpB,OACI,qCACA,uBAAMJ,SAAU,CAAC,EAAE,GAAG,IAAtB,UACI,sCAAsBK,KAAM,CAAC,EAAE,MAC/B,mCAAmBF,MAAM,YAE7B,uBAAMG,eAAa,EAACN,SAAW,CAAC,GAAG,GAAG,GAAIJ,SAAU,EAAE,GAAIW,KAAKC,GAAI,EAAG,GAAtE,UACI,qCAAqBH,KAAM,CAAC,IAAI,IAAI,EAAE,KACtC,gCAAgBI,aAAW,EAACC,QAAS,QAEzC,cAAC,WAAD,CAAUC,SAAU,KAApB,SACI,cAACzB,EAAD,S,ICCG0B,E,uKAVP,OACI,eAAC,IAAD,CAAQT,MAAM,UAAd,UACI,iCAAiBU,SAAU,QAASC,YAAa,SAAUC,UAAW,GAAKf,SAAU,CAAC,EAAG,GAAI,KAC7F,kCAAkBgB,YAAU,EAAChB,SAAU,EAAE,EAAE,GAAG,KAC9C,cAACI,EAAD,W,GANMa,a,MCMPC,MANf,WACE,OACI,cAAC,EAAD,KCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0360d7db.chunk.js","sourcesContent":["import {GLTFLoader} from 'three/examples/jsm/loaders/GLTFLoader';\r\nimport {useLoader, useFrame} from 'react-three-fiber';\r\nimport {useRef} from 'react';\r\n\r\nexport default function Laptop() {\r\n    const main = useRef();\r\n    const {nodes} = useLoader(GLTFLoader, 'laptop.glb');\r\n    console.log(nodes);\r\n    useFrame(()=> {\r\n        main.current.rotation.y -= .005;\r\n    });\r\n    return(\r\n        <group ref={main} rotation={[0,-90,320]} scale={[1.5,1.5,1.5]} position={[-.1,.3,0]}>\r\n            <mesh>\r\n                <bufferGeometry attach=\"geometry\" {...nodes['Cube_1'].geometry}/>\r\n                <meshBasicMaterial attach=\"material\" color=\"#313133\"/>\r\n            </mesh>\r\n            <mesh>\r\n                <bufferGeometry attach=\"geometry\" {...nodes['Cube_2'].geometry}/>\r\n                <meshBasicMaterial attach=\"material\" color=\"black\"/>\r\n            </mesh>\r\n            <mesh>\r\n                <bufferGeometry attach=\"geometry\" {...nodes['Cube_3'].geometry}/>\r\n                <meshBasicMaterial attach=\"material\" color=\"white\"/>\r\n            </mesh>\r\n            <mesh>\r\n                <bufferGeometry attach=\"geometry\" {...nodes['Cube_4'].geometry}/>\r\n                <meshBasicMaterial attach=\"material\" color=\"red\"/>\r\n            </mesh>\r\n\r\n        </group>\r\n    );\r\n}","import Laptop from './laptopModel';\r\nimport React, {Suspense} from 'react';\r\n\r\nexport default function Layout() {\r\n    return (\r\n        <>\r\n        <mesh position={[0,0,-10]}>\r\n            <circleBufferGeometry args={[8,64]} />\r\n            <meshBasicMaterial color=\"gray\" />\r\n        </mesh>\r\n        <mesh receiveShadow position ={[0,-10,0]} rotation={[-0.5*Math.PI, 0, 0]}>\r\n            <planeBufferGeometry args={[500,500,1,1]} />\r\n            <shadowMaterial transparent opacity={0.2} />\r\n        </mesh>\r\n        <Suspense fallback={null}>\r\n            <Laptop />\r\n        </Suspense>\r\n        </>\r\n    );\r\n} ","import React, { Component } from 'react';\r\nimport {Canvas} from 'react-three-fiber';\r\nimport Layout from '../model/layoutModel';\r\n\r\nclass Loading extends Component {\r\n    render() {\r\n        return (\r\n            <Canvas color=\"#dfdfe5\">\r\n                <hemisphereLight skyColor={\"black\"} groundColor={0xffffff} intensity={0.5} position={[0, 50, 0]} />\r\n                <directionalLight castShadow position={[-8,20,8]} />\r\n                <Layout/>\r\n            </Canvas>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Loading;","import React, {Suspense} from 'react';\nimport Loading from './components/loadingComponent';\nimport './App.css';\n\nfunction App() {\n  return (\n      <Loading />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}